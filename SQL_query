//summerar alla köporder efter prod ID 

SELECT Bye_Orders.prod_id, SUM(Bye_Orders.Prod_amu) From Bye_Orders
Group BY prod_id;


// superar alla köporder efter både wh och prodID

SELECT Bye_Orders.War_ID, Bye_Orders.prod_id, SUM(Bye_Orders.Prod_amu) From Bye_Orders
Group BY war_id, prod_id;



// Summerar alla produkter + köp ordrarna efter prod och WH

SELECT WH_inv.War_name, WH_inv.War_ID, Bye_Orders.prod_id, WH_inv.amount + Bye_Orders.Prod_amu From Bye_Orders
Join WH_inv On WH_inv.Prod_ID = Bye_Orders.Prod_ID
Group BY WH_inv.war_id, Bye_Orders.prod_id;

__________________Updated DB_______________

//summerar och subrtaherar alla in och utvärden för att se aktuellt lagerstatus

SELECT WareHouse.War_name, WareHouse.WH_ID, COALESCE(WH_inv.amount, 0), COALESCE(B_Orders.Prod_amu, 0), COALESCE(S_Orders.Amount, 0) From ID_map
left Join WareHouse On WareHouse.WH_ID = ID_map.WH_ID
left JOIN WH_inv ON WH_inv.Inv_ID = ID_map.Inv_ID
left Join B_Orders ON B_Orders.Inv_ID = ID_map.Inv_ID
left join S_Orders ON S_Orders.Inv_ID = ID_map.Inv_ID;

// Överblickar olika databasdelar 

SELECT WareHouse.War_name, WareHouse.WH_ID,ID_map.Prod_ID, COALESCE(B_Orders.Prod_amu, 0), COALESCE(S_Orders.Amount, 0) From ID_map
left Join WareHouse On WareHouse.WH_ID = ID_map.WH_ID
left JOIN WH_inv ON WH_inv.Inv_ID = ID_map.Inv_ID
left Join B_Orders ON B_Orders.Inv_ID = ID_map.Inv_ID
left join S_Orders ON S_Orders.Inv_ID = ID_map.Inv_ID;

-------------Future work--------------

If Btn_buy pressed ( 

INSERT INTO B_Orders (Prod_amu, Inv_ID) values
(”User_value”, "user_picked_ID":

);




